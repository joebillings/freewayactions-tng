<action-encoding>UTF-8</action-encoding>
<library-action name="cdn_functions">
<action-javascript>
/**
 * Write a script to an external file.
 * name: common name of script (domloaded, windowload, custom)
 * fileParameter: the action-file that holds this file
 * content: string or array of strings containing the content
 * returns URL to generated file, for linking purposes
 */
var createExternalScript = function(name, fileParameter, content){
  if(!content.join){
    content = [content];
  }
  var myFile = new FWFile();
  if(fwParameters[fileParameter].fwHasFile){
    myFile.fwOpenWrite(fwParameters[fileParameter].fwValue, true, 'TEXT');
    myFile.fwSetEncoding('UTF-8');
  }else{
    var path = fwPage.fwHttpPath();
    path = path.replace(/\//g, '_').split('.');
    var filename = path.pop();
    path = path.join('.') + '_' + name + '.js';
    myFile.fwOpenWrite(path, true, 'TEXT');
    myFile.fwSetEncoding('UTF-8');
  }
  for (var i=0; i < content.length; i++) {
    myFile.fwWrite(content[i] + "\n");
  };
  myFile.fwClose();
  fwParameters[fileParameter].fwSpecify(myFile);
  var filePath = fwParameters[fileParameter].toString();
  fwParameters[fileParameter].fwClear();
  return filePath;
}
/**
 * Write a stylesheet to an external file.
 * name: common name of sheet (without extension)
 * fileParameter: the action-file that holds this file
 * content: string or array of strings containing the content
 * returns URL to generated file, for linking purposes
 */
var createExternalStyle = function(name, fileParameter, content){
  if(!content.join){
    content = [content];
  }
  var myFile = new FWFile();
  if(fwParameters[fileParameter].fwHasFile){
    myFile.fwOpenWrite(fwParameters[fileParameter].fwValue, true, 'TEXT');
    myFile.fwSetEncoding('UTF-8');
  }else{
    var path = fwPage.fwHttpPath();
    path = path.replace(/\//g, '_').split('.');
    var filename = path.pop();
    path = path.join('.') + '_' + name + '.css';
    myFile.fwOpenWrite(path, true, 'TEXT');
    myFile.fwSetEncoding('UTF-8');
  }
  for (var i=0; i < content.length; i++) {
    myFile.fwWrite(content[i] + "\n");
  };
  myFile.fwClose();
  fwParameters[fileParameter].fwSpecify(myFile);
  var filePath = fwParameters[fileParameter].toString();
  fwParameters[fileParameter].fwClear();
  return filePath;
}
 
/**
* Create a CDN link to a JavaScript library. 
* name: common filename for the library (prototype, scriptaculous, jquery)
* path: (optional) fully-qualified URL to the CDN-hosted file
* (path is not needed if you are linking to prototype or scriptaculous)
* WARNING! changes any existing link in the page to the library to the 
* one specified in path or defaults
* returns reference to the script
*/
var findOrCreateScriptLink = function(name, path){
  var head = fwDocument.fwTags.fwFind('head');
  var script = pageHasLinkToScript(name), load = '';
  var libs = {
    'prototype': 'http://ajax.googleapis.com/ajax/libs/prototype/1.7/prototype.js',
    'scriptaculous': 'http://ajax.googleapis.com/ajax/libs/scriptaculous/1.9/scriptaculous.js'
  };
  if(!libs[name]){
    if(!!path){
      libs[name] = path;
    }else{
      fwAbort('Please provide a URL for “' + name + '”. Publishing cannot continue.');
    }
  }
  if(!script){
    script = head.fwAdd('script', true);
    script.fwAddRawOpt('');
    head.fwAddRawOpt('');
  }
  //catch any load variables from scriptaculous
  if(name == 'scriptaculous' && script.src && script.src.toString().match(/\?load=/)){
    load = script.src.toString().match(/(\?load=.+?)"/)[1]; //"
  }
  //overwrite the path to the script to make it current
  script.src = fwQuote(libs[name] + load);
  script.type = fwQuote('text/javascript');
  script.charset = fwQuote('utf-8');
  return script;
}
 
var pageHasLinkToScript = function(name){
  var script = false;
  var scripts = fwDocument.fwTags.fwFindAll('script');
  for(i in scripts){
    if(scripts[i].src && scripts[i].src.toString().match(new RegExp(name + '\.js'))){
      script = scripts[i];
    }
  }
  return script;
}
 
var findOrCreateStyleLink = function(name, path){
  var head = fwDocument.fwTags.fwFind('head');
  var styles = head.fwFindAll('link'), re = new RegExp(name + '\.css');
  var findStyleLink = function(re){
    for(i in styles){
      if(styles[i].href && styles[i].href.toString().match(re)){
        return styles[i];
      }
    }
  }
  var style = findStyleLink(re);
  if(!style){
    style = head.fwAdd('link', false);
    head.fwAddRawOpt('');
  }
  style.href = fwQuote(path);
  style.rel = fwQuote('stylesheet');
  style.type = fwQuote('text/css');
  style.charset = fwQuote('utf-8');
  return style;
}
 
/**
* Wrapper to simplify function call
* returns nothing
*/
var addPrototype = function(){
  findOrCreateScriptLink('prototype');
}
 
/**
* Add scriptaculous to the page, and load any modules needed if fewer than all.
* modules: comma-separated string or array of scriptaculous modules
* returns nothing
*/
 
var addScriptaculous = function(modules){
  var scriptaculousLibs = ["builder", "effects", "dragdrop", "controls", "slider", "sound"];
  var load = [];
  if(modules.join){
    modules = modules.join();
  }
  var script = findOrCreateScriptLink('scriptaculous');
  if(script.src.toString().match(/\?load=/)){
    modules += script.src.toString().split(/\?load=/)[1];
  }
  for (var i=0; i < scriptaculousLibs.length; i++) {
    var re = new RegExp(scriptaculousLibs[i]);
    if(modules.match(re))
    load.push(scriptaculousLibs[i]);
  };
  if(load.length > 0 && load.length < 6){
    load = '?load=' + load.join(',');
    script.src = script.src.toString().replace(/\?load=[^"]+/, '').replace(/"$/, load + '"'); //"
  }
}
 
 
</action-javascript>
</library-action>
<library-action name="classname_functions">
<action-version version="0.1">
Classname getter and setter functions, heavily influenced by Prototype.js.
Copyright 2013 Walter Davis Studio.
License: MIT License.
</action-version>
<action-javascript>
if(!'test'.strip) String.prototype.strip = function() {
  return this.replace(/^\s+/, '').replace(/\s+$/, '');
};
 
if(undefined == FWTag.hasClassName){
  FWTag.prototype.hasClassName = function(className) {
    className = fwQuote(className,'','"'); //"
    var elementClassName = (this["class"]) ? fwQuote(this["class"],'','"') : ''; //"
    return ((elementClassName.length > 0) && (elementClassName == className || new RegExp("\\b" + className + "\\b").test(elementClassName)));
  };
}
if(undefined == FWTag.addClassName){
  FWTag.prototype.addClassName = function(className) {
    className = fwQuote(className,'','"'); //"
    if (!this.hasClassName(className)){
      var elementClassName = (this["class"]) ? fwQuote(this["class"],'','"') : ''; //"
      var out = (elementClassName + ' ' + className).strip();
      this["class"] = fwQuote(out);
      return this;
    }
  };
}
if(undefined == FWTag.removeClassName){
  FWTag.prototype.removeClassName = function(className) {
    var className = fwQuote(className,'','"');//"
    var elementClassName = (this['class']) ? fwQuote(this['class'],'','"') : '';//"
    elementClassName = elementClassName.replace(
      new RegExp("(^|\\s+)" + className + "(\\s+|$)"), ' ').strip();
    this['class'] = (elementClassName.length > 0) ? fwQuote(elementClassName) : null;
    return this;
  };
}
</action-javascript>
</library-action>
<action name="com.wdstudio.pull_quote" title="PullQuote" height="12" width="100">
<action-appliesto non-html32 />
<action-version version="0.1">
PullQuote
Copyright 2013 Walter Lee Davis
Suggested by Todd@xiiro

Add a semantically-correct pull-quote to a paragraph or other text container.
</action-version>
<action-markup name="default_style">.has-pullquote:before {
	/* Reset metrics. */
	padding: 0;
	border: none;
	
	/* Content */
	content: attr(data-pullquote);
	
	/* Pull out to the right, modular scale based margins. */
	float: right;
	width: 320px;
	margin: 12px -140px 24px 36px;
	
	/* Baseline correction */
	position: relative;
	top: 5px;
	
	/* Typography (30px line-height equals 25% incremental leading) */
	font-size: 23px;
	line-height: 30px;
}
</action-markup>
<action-text var name="pullquote" default="">
<action-text var name="style" default="">
<action-file var name="stylesheet">
<action-button name="function1" title="Pull-quote Text" onclick="EditCode('pullquote')";>
<action-button name="function2" title="Pull-quote CSS Style" onclick="EditCode('style', 'default_style')";>
<action-javascript>
<action-include name="classname_functions">
<action-include name="cdn_functions">
if(! String.escapeHTML ){
  String.prototype.escapeHTML = function(){
    return this.replace(/"/g,'&quot;').replace(/</g,'&lt;').replace(/>/g,'&gt;'); //"
  }
}
var my_name = fwItem.toString();
/**
 * Edit text stored in a fwParameter
 * Adapted from Source Code Snooper by Tim Plumb
 * codeName: name of the fwParameter
 * returns nothing
 */
function EditCode(codeName, source){
  if(undefined == source){
    source = '';
  }else{
    source = '.' + my_name + fwMarkups[source].toString();
  }
  var mycustomcode = (fwParameters[codeName].fwValue) ? fwParameters[codeName].toString() : source;
  var myprompt = "Add your code here";
  var mycustomcodeprompt = fwBigPrompt(myprompt, mycustomcode);
  if (mycustomcodeprompt != null) {
    if (mycustomcodeprompt != mycustomcode) {
      fwParameters[codeName].fwValue = mycustomcodeprompt;
    }
  }
}
function fwBeforeEndBody(){
  //get a reference to the action item you inserted inline
  var action_item = fwDocument.fwTags.fwFind(fwItem);
  var block_tags = ['blockquote','p','li','dd','dt','h1','h2','h3','h4','h5','h6'];
  if(action_item && action_item.fwFindEnclosing(block_tags)){
    //look up to find the first enclosing block-level tag
    var element = action_item.fwFindEnclosing(block_tags);
    if(!!element){
      //we have a parent to play with!
      //name the stylesheet unambiguously
      var sheet_name = my_name + '_pullquote';
      //move the stylesheet into an external sheet
      var path = createExternalStyle(sheet_name, 'stylesheet', fwParameters.style.fwValue);
      //link it to the page head
      findOrCreateStyleLink(sheet_name, path);
      //add the pull-quote content to the parent
      var content = fwParameters.pullquote.fwValue.toString().escapeHTML();
      element['data-pullquote'] = fwQuote(fwEncode(content, fwPage));
      //mark the parent with the classnames
      element.addClassName('has-pullquote ' + my_name);
      //clean out the marker element
      action_item.fwDelete();
    }
  }
}

</action-javascript>
</action>
