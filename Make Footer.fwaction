<action-encoding>UTF-8</action-encoding>
<library-action name="style_accessors">
<action-version version="1.2.2">
Style Accessors

Get and set styles on any element, regardless where they were initially defined.

MIT License
Copyright (c) 2013 Walter Lee Davis
</action-version>
<action-javascript>
/**
* Does this page use a root-based Resources folder?
* @return boolean
*/
if(undefined == FWPage.hasRootResourcesFolder){
  FWPage.prototype.hasRootResourcesFolder = function(){
    var head = fwDocument.fwTags.fwFind('head');
    if(!head) fwAbort('Please call hasRootResourcesFolder from fwBeforeEndHead or later.');
    var links = head.fwFindAll('link', 'href');
    for(var i in links){
      if(links[i].href){
        var link = links[i].href.toString();
        var page = this.fwFileName.toString().split('.').shift();
        if(link.match('../css') && link.indexOf(page) > 0){
          return true;
        }
      }
    }
    return false;
  };
}
/**
* Does this page use a Resources folder?
* @return boolean
*/
if(undefined == FWPage.hasNoResourcesFolder){
  FWPage.prototype.hasNoResourcesFolder = function(){
    return (! fwClearGif.toString().match('Resources/'))
  };
}
/**
* Find the folder where the style should be saved
* @return string
*/
if(undefined == FWPage.styleFolder){
  FWPage.prototype.styleFolder = function(){
    var rootFolder = fwDocument.fwPages.fwItems[0].fwFolder.fwHttpPath();
    if(this.hasNoResourcesFolder()){
      return '/' + this.fwFolder.fwHttpPath();
    }
    if(this.hasRootResourcesFolder()){
      return rootFolder + '/css/';
    }
    return '/' + this.fwFolder.fwHttpPath() + 'css/';
  };
}
/**
* Define a URL for the override sheet for this page
* @return string relative URL to override sheet
*/
if(undefined == FWPage.styleOverrideURL){
  FWPage.prototype.styleOverrideURL = function(){
    var folder = this.styleFolder();
    return folder + this.basename() + '_override.css';
  };
}
/**
* Define a path to the override sheet for this page.
* @return string root-relative path to the override sheet
*/
if(undefined == FWPage.styleOverridePath){
  FWPage.prototype.styleOverridePath = function(){
    var rootFolder = fwDocument.fwPages.fwItems[0].fwFolder;
    if(!rootFolder) fwAbort('Could not locate the root folder. Make sure there is at least one page in it.')
    var rootFolderPath =  rootFolder.fwHttpPath(null, true);    
    return (rootFolderPath + this.styleOverrideURL()).replace(/\//g, ':');
  };
}
/**
* Basename for the override sheet
* @return string page filename without extension
*/
if(undefined == FWPage.basename){
  FWPage.prototype.basename = function(){
    var filename = this.fwFileName.toString().split('.');
    if(this.hasRootResourcesFolder()){
      filename = this.fwHttpPath().toString().replace(/\//g,'_').split('.');
    }
    filename.pop();
    return filename.join('.');
  };
}
/**
* Add a link to an override stylesheet, and create the file for that sheet.
* Only alters the page once per publish cycle.
* Must be called from fwBeforeEndHead() or later.
* @return link to sheet
*/
if(undefined == FWPage.addOverride){
  FWPage.prototype.addOverride = function(){
    if(this.overrideLink) return this.overrideLink;
    var head = fwDocument.fwTags.fwFind('head');
    if(!head) fwAbort('Please call addOverride from fwBeforeEndHead or later.')
    var link = head.fwAddOpt('link');
    head.fwAddRawOpt('');
    var myFile = this.resetOverride();
    fwParameters['styleOverride'].fwSpecify(myFile);
    link.rel = fwQuote('stylesheet');
    link.href = fwQuote(fwParameters['styleOverride'].toString());
    fwParameters['styleOverride'].fwClear();
    link.type = fwQuote('text/css');
    this.overrideLink = link;
    return link;
  };
}
/**
* Erase or initialize the reset stylesheet.
* @return FWFile
*/
if(undefined == FWPage.resetOverride){
  FWPage.prototype.resetOverride = function(){
    var myFile = new FWFile();
    myFile.fwOpenWrite(this.styleOverridePath(), true);
    myFile.fwSetEncoding('UTF-8');
    myFile.fwWrite('');
    myFile.fwClose();
    return myFile;
  };
}
/**
* Convert a string of CSS into a hash.
* @return object JSON of styles
*/
if(undefined == cssToHash){
  var cssToHash = function(string){
    var out = {}, string = string.toString().replace(/^"\s*(.+?)\s*"$/, '$1');
    var pairs = string.split(/\s*;\s*/);
    for (var i in pairs){
      var pair = pairs[i].split(/\s*:\s*/);
      out[pair[0]] = pair[1];
    };
    return out;
  };
}
/**
* Convert a JSON object of style definitions into CSS.
* @return string CSS style rules
*/
if(undefined == hashToCSS){
  var hashToCSS = function(hash){
    var out = [];
    for (var i in hash){
      var pair = i + ': ' + hash[i];
      out.push(pair);
    }
    return out.join('; ').toString();
  };
}
/**
* Get the CSS selector for a single tag.
* @return string
*/
if(undefined == FWTag.getSelector){
  FWTag.prototype.getSelector = function(){
    var id = '#' + this.id.toString().slice(1,-1);
    return id + ', ' + id + '.f-ms';
  };
}
/**
* Write CSS into the override sheet.
* @return void
*/
if(undefined == FWTag.setOverride){
  FWTag.prototype.setOverride = function(content){
    var sheet = fwPage.addOverride();
    var myFile = new FWFile();
    myFile.fwOpenRead(fwPage.styleOverridePath());
    var existing = myFile.fwReadString(myFile.fwAvailable);
    myFile.fwClose();
    var overwrite = false;
    if(existing && existing.match(this.id.toString().slice(1,-1))){
      var re = new RegExp(this.getSelector() + ' \\{ (.+?) \\}');
      existing = existing.replace(re, content);
      content = existing;
      overwrite = true;
    }else{
      content = content + "\n";
    }
    myFile.fwOpenWrite(fwPage.styleOverridePath(), overwrite);
    myFile.fwSetEncoding('UTF-8');
    myFile.fwWrite(content);
    myFile.fwClose();
    this.style = null;
  };
}
/**
* Read the content of the entire override sheet.
* @return object JSON of styles
*/
if(undefined == FWTag.getOverride){
  FWTag.prototype.getOverride = function(){
    var myFile = new FWFile();
    myFile.fwOpenRead(fwPage.styleOverridePath(), false);
    var content = myFile.fwReadString(myFile.fwAvailable);
    myFile.fwClose();
    var re = new RegExp(this.getSelector() + ' \\{ (.+?) \\}');
    if( null != content.match(re) && content.match(re).length > 0 )
    return( cssToHash(content.match(re)[1]) );
    return {};
  };
}
/**
* Get one CSS attribute of a single tag.
* attributeName is an attribute (width, padding...) returns value (if set) or null.
* @return mixed
*/
if(undefined == FWTag.getStyle){
  FWTag.prototype.getStyle = function(attributeName){
    var styles = this.getAllStyles();
    return styles[attributeName] || null;
  };
}
/**
* Get override CSS attributes of a single tag, in format for writing to external stylesheet.
* attributeName is an attribute (width, padding...) returns value (if set) or false.
* @return string or false
*/
if(undefined == FWTag.getStyleAsRule){
  FWTag.prototype.getStyleAsRule = function(){
    if(this.style){
      return this.getSelector() + ' { ' + this.style.toString().slice(1,-1) + ' }';
    }else{
      return false;
    }
  };
}
/**
* Get all CSS attributes of a single tag, regardless where they were set.
* @return JSON object
*/
if(undefined == FWTag.getAllStyles){
  FWTag.prototype.getAllStyles = function(){
    if (this==null) return null;
    var styles = {}, overrides = {};
    if(fwPage.fwElementStyle){
      styles = cssToHash(fwPage.fwElementStyle(this));
    }
    if(fwDocument.fwExternalStylesheets){
      overrides = this.getOverride();
      for(var i in overrides){
        styles[i] = overrides[i];
      }
    }
    if(this.style){
      var inline = cssToHash(this.style);
      for (var i in inline) {
        styles[i] = inline[i];
      };
    }
    return styles;
  };
}
/**
* Sets a CSS attribute such as "position:absolute" in a tag value 
* Passing an attribute value of null resets that attribute to default
* @return void
*/
if(undefined == FWTag.setStyle){
  FWTag.prototype.setStyle = function(attributeName, value){
    if(this == null || arguments.length < 2) return;
    if(typeof value == 'string' && value.toLowerCase() == 'null') value = null;
    var styles = {}, external = {};
    var reset = { /* BACKGROUND */ 'background': 'none', 'background-attachment':
    'scroll', 'background-clip': 'border-box', 'background-color': 'inherit',
    'background-image': 'none', 'background-origin': 'padding-box',
    'background-position': '0% 0%', 'background-repeat': 'repeat', 'background-size':
    'auto', /* BORDERS */ 'border-collapse': 'separate', 'border': 'none',
    'border-width': '0', 'border-style': 'none', 'border-color': '#000000',
    'border-width': 'none', /* top */ 'border-top': 'none', 'border-top-color':
    '#000000', 'border-top-style': 'none', 'border-top-width': '0', /* right */
    'border-right': 'none', 'border-right-color': '#000000', 'border-right-style':
    'none', 'border-right-width': '0', /* bottom */ 'border-bottom': 'none',
    'border-bottom-color': '#000000', 'border-bottom-style': 'none',
    'border-bottom-width': '0', /* left */ 'border-left': 'none', 'border-left-color':
    '#000000', 'border-left-style': 'none', 'border-left-width': '0', /* border-image */
    'border-image': 'none', 'border-image-outset': '0', 'border-image-repeat': 'stretch',
    'border-image-slice': '100%', 'border-image-source': 'none', 'border-image-width':
    '1', /* border-radius */ 'border-radius': '0', 'border-top-left-radius': '0',
    'border-top-right-radius': '0', 'border-bottom-left-radius': '0',
    'border-bottom-right-radius': '0', /* BOX ATTRIBUTES */ 'height': 'auto',
    'max-height': 'none', 'min-height': '0', 'width': 'auto', 'max-width': 'none',
    'min-width': '0', 'position': 'static', 'display': 'block', 'visibility': 'visible',
    'top': 'auto', 'right': 'auto', 'bottom': 'auto', 'left': 'auto', 'float': 'none',
    'clear': 'none', 'margin': '0', 'margin-top': '0', 'margin-right': '0',
    'margin-bottom': '0', 'margin-left': '0', 'padding': '0', 'padding-top': '0',
    'padding-right': '0', 'padding-bottom': '0', 'padding-left': '0', 'opacity': '1',
    'overflow': 'visible', 'overflow-x': 'visible', 'overflow-y': 'visible', 'z-index':
    'auto', 'zoom': '1', 'filter': 'none', 'cursor': 'auto', 'box-shadow': 'none',
    'box-sizing': 'content-box', /* TEXT */ 'color': 'inherit', 'font': 'inherit',
    'font-family': 'inherit', 'font-size': '1em', 'font-style': 'inherit',
    'font-variant': 'inherit', 'font-weight': 'inherit', 'letter-spacing': 'inherit',
    'line-height': 'inherit', 'list-style-image': 'none', 'list-style-position':
    'outside', 'list-style-type': 'disc', 'list-style': 'disc', 'text-decoration':
    'none', 'text-indent': '0', 'text-shadow': 'none', 'vertical-align': 'baseline',
    'white-space': 'normal' };
    if(fwPage.fwElementStyle){
      external = cssToHash(fwPage.fwElementStyle(this));
    }
    if(fwDocument.fwExternalStylesheets){
      styles = this.getOverride();
    }
    if(this.style){
      var inlines = cssToHash(this.style);
      for(var i in inlines){
        styles[i] = inlines[i];
      }
    }
    if(value == null){
      if(reset[attributeName] && external[attributeName]){
        styles[attributeName] = reset[attributeName];
      }else{
        delete styles[attributeName];
      }
    }else{
      styles[attributeName] = value;
    }
    this.style = fwQuote(hashToCSS(styles));
    if(fwDocument.fwExternalStylesheets){
      // write styles to override
      this.setOverride(this.getStyleAsRule());
      this.style = null;
    }
  };
}
</action-javascript>
</library-action>

<item-action name="com.worldofpaul.MakeFooter" title="Make Item Into Page Footer">
<action-appliesto layer html non-html32/>
<action-version version="2.0.6">
Make Footer

This Action turns the item to which it is put into the page's footer. The footer will appear underneath the lowest non-layered based item on the page.

Paul Dunning - 2008, 2009, 2010, 2013
www.actionsworld.com
</action-version>
<action-number name="spacer" minimum=-1 title="Space before footer" default="24" real-numbers>
<action-checkbox name="csslayout" title="Relative Page Layout Action Used" default="no">

<action-file name="styleOverride" var />




<action-markup custom name="myFooterStart"><!--FOOTER STARTS HERE -->
<table border="0" cellspacing="0" cellpadding="0" width="_width_">
	<tr valign="top">
		<td height="_space_" style="font-size:1px;"><p class="f-lp"><img src="_clear_" border="0" width="1" height="_space_" alt="" style="vertical-align:baseline"></p></td>
	</tr>
	<tr valign="top">
		<td height="_height_"></action-markup>

<action-markup custom name="myFooterEnd"></td>
	</tr>
</table></action-markup>


<action-markup custom name="myFooter"><table border="0" cellspacing="0" cellpadding="0" width="_width_">
	<tr valign="top">
		<td height="_space_"><p class="f-lp"><img src="_clear_" border="0" width="1" height="_space_" alt="" style="vertical-align:baseline"></p></td>
	</tr>
	<tr valign="top">
		<td height="_height_">_content_</td>
	</tr>
</table></action-markup>

<action-markup custom name="myFooterXHTMLstrictStart"><table border="0" cellspacing="0" cellpadding="0">
	<tr>
		<td valign="top" style="width:_width_px; height:_space_px; _colour_; font-size:1px"><p class="f-lp"><img src="_clear_" width="1" height="_space_" alt="" style="vertical-align:baseline"/></p></td>
	</tr>
	<tr>
		<td valign="top" style="width:_width_px; height:_height_px; _colour_"></action-markup>

<action-markup custom name="myFooterXHTMLstrictEnd"></td>
	</tr>
</table></action-markup>


<action-markup custom name="myFooterXHTMLstrict"><table border="0" cellspacing="0" cellpadding="0">
	<tr>
		<td valign="top" style="width:_width_px; height:_space_px; _colour_; font-size:1px;"><p class="f-lp"><img src="_clear_" width="1" height="_space_" alt="" style="vertical-align:baseline"/></p></td>
	</tr>
	<tr>
		<td valign="top" style="width:_width_px; height:_height_px; _colour_">_content_</td>
	</tr>
</table></action-markup>

<action-javascript>
<action-include name="style_accessors">

function fwBeforeStartHead()
{
	fwItem.removeFromRelativeLayout = true;
}

function isSet( variable )
{
	return( typeof( variable ) != 'undefined' );
}

function LayersOnly(item)
{
	if(item && item.fwIsLayer)
		return true;
	else
		return false;
}

function DeleteCSSAttribute(tag,fieldName,attributeName)
{
	if (tag==null)
		return;
	
	var tagField=tag[fieldName];
	if (tagField == null)
		return;
	else
	{
		var tagField = tagField.toString();
		var leftPos = tagField.indexOf(attributeName+":");
		if (leftPos > 1)
			leftPos = tagField.indexOf(" "+attributeName+":") + 1;
				if (leftPos > 0)
		{
			var leftStr = tagField.slice(0, leftPos);
			var rightStr = tagField.slice(leftPos, tagField.length);
			var rightPos = rightStr.indexOf(";");
			if (rightPos == -1)
				rightPos = rightStr.length-1;
			rightStr = rightStr.slice(rightPos+1, rightStr.length);
			tagField = leftStr+rightStr;
		}
		tag[fieldName]= tagField;
	}
}

function fwParameterChanged(newParam , oldParam)
{
	if (newParam.fwName == "spacer")
	{
		myVal = newParam.fwValue;
		// Only allow whole numbers
		if (myVal != parseInt(myVal))
		{
			alert("Only whole numbers can be used; previous value substituted.");
			newParam.fwValue = oldParam.fwValue;
		}
	}
}

function fwCheckParent( theDIV , tags )
{
//	alert("HELLO");
	checkTags = fwDocument.theDIV.fwFindAll("div");
	result = false;
	for (i in checkTags)
	{
		myTag = checkTags[i];
		if (myTag.id)
		{
			alert(myTag.id);
		}
	}
}

// Replace the class of an item without removing the existing classes
function setClass(item, value)
{
	if(item["class"])
		item["class"] = item["class"].toString().replace(/\"/, "\""+value+" ");
	else
		item["class"] = fwQuote(value);
	return item["class"];
}

function fwInterface()
{
	//fwParameters["csslayout"].fwVisible = false;
}

function findTags( myItem )
{
	theTags = new Array( "div" , "address" , "article" , "aside" , "footer" , "header" , "nav" , "section" );
	
	for ( i in theTags )
	{
		var tags = fwDocument.fwTags.fwFind(theTags[i],myLayerThing);
		if (tags)
			return( tags );
	}
	
	return( null );
}

function fwAfterEndBody() // was after end HTML
{	
	if (!fwItem.fwIsPublished)
		return;

	if (fwPage.fwHTMLLevel == 5)
	{
		var myTextTop = fwMarkups["myFooterXHTMLstrictStart"].toString();
		var myTextBottom = fwMarkups["myFooterXHTMLstrictEnd"].toString();
		var myContent="";
	}
	else
	{
		var myTextTop = fwMarkups["myFooterStart"].toString();
		var myTextBottom = fwMarkups["myFooterEnd"].toString();
		var myContent="&nbsp;";
	}
	
	if (fwPage.fwAlignment == 1)
	{
		myWidth = "100%";
	}
	else
	{
		myWidth = fwPage.fwWidth;
	}
	
	mySpace = fwParameters["spacer"].fwValue;
	if (mySpace<=0)
		mySpace = 1;
	
//	myHeight = fwParameters["size"];
	myTextTop = myTextTop.replace(/_space_/g,mySpace);
	myTextTop = myTextTop.replace(/_width_/g,myWidth);
	myTextTop = myTextTop.replace(/_clear_/g,fwClearGif);
	myTextTop = myTextTop.replace(/_colour_/g,"");

	if (fwPage.fwHTMLLevel == 4)
		trans=" /";
	else
		trans = "";
	
	myTextTop = myTextTop.replace(/_trans_/g,trans);

	myLayerThing = fwItem;
	myHeight = myLayerThing.fwHeight;
	var tags = findTags( myLayerThing );
	
//	var tags=fwDocument.fwTags.fwFind("div",myLayerThing);
	if (!tags)
		return;

//	alert(tags);
	theStyle = tags.style;
	
	// want to remove positioning from the style
//	DeleteCSSAttribute(tags,"style","top");
//	DeleteCSSAttribute(tags,"style","left");
//	DeleteCSSAttribute(tags,"style","bottom");
//	DeleteCSSAttribute(tags,"style","right");
	
	var myFooterItem = fwDocument.fwTags.fwFind(fwItem);
	myFooterItem.setStyle('top', null);
	myFooterItem.setStyle('left', null);
	myFooterItem.setStyle('right', null);
	myFooterItem.setStyle('bottom', null);

/*
	myContent = tags.fwToHTML();
	alert(myContent);
	tags.fwDelete();
*/



	myTextTop = myTextTop.replace(/_height_/g,myHeight);
//	myTextTop = myTextTop.replace(/_content_/g,myContent);

	var bodyTag = fwDocument.fwTags.fwFind("body");
	if (bodyTag)
	{
		if ( fwPage.fwHTMLLevel > 2 )
		{
			divs = fwDocument.fwTags.fwFindAll("div");
			for (i in divs)
			{
				div = divs[i];
//				alert(div.id);
				if (div.id)
				{
					myID = div.id.toString();
					myID = myID.slice(1,-1);
					if (fwParameters["csslayout"].fwBoolValue)
					{

						// New FW 5.5 CSS Layout
						if (myID == "PageDiv")
						{
							theDIV = div.fwAdd("",true);
							
//							alert(fwPage , "\n" , theDIV , "\n" , tags);						
							myStyle = "";


							/*
							if (tags.style)
							{

								myStyle = tags.style.toString();
							
								myStyle = myStyle.slice(1,-1);
							
							}
							*/
							// remove the Position attribute
							// from the style
							myFooterItem.setStyle('position', 'relative');
							myFooterItem.setStyle('float', 'left');
							myFooterItem.setStyle('display', 'inline');
							myFooterItem.setStyle('top', '0px');
							
							myFooterItem.setStyle('margin-top', fwParameters["spacer"].fwValue+"px");
							
							
							// Overriding the override of an override
							/*
							myID = myFooterItem.ID.toString().slice(1,-1);
							
							var headTag = fwDocument.fwTags.fwFind("head");
							
							var cssStyles = headTag.fwAddCSSStyles();
							cssStyles.fwAddRaw("\n#"+myID+".f-ms { position:relative; top:0px;}\n");
							*/
							
							// Which is silly, but necessary
							
							/*
							pos = myStyle.indexOf("position:");
							part1 = myStyle.substring(0,pos);
							part2 = myStyle.substring(pos,myStyle.length);
							pos = part2.indexOf(";");
							part2 = part2.substring(pos,part2.length);
							
							myStyle = part1 + "margin-top:"+fwParameters["spacer"].fwValue+"px" + part2;
							*/
							
							//myStyle = myStyle + "; position:relative; float:left; display:inline;top:0px;";

							//tags.style = fwQuote(myStyle);
							
							//alert(myStyle);
							
							//setClass(tags, "subcontainer clear")
						//	tags["class"] = fwQuote("subcontainer clear");

							theDIV.fwMove(tags)
						}
					}
					else
					{
						
						if (myID == "PageDiv")
						{
							tables = div.fwFindAll("table");
							for (i in tables)
							{
								table = tables[i];
								itemEnclosing = table.fwEnclosing;
								if (itemEnclosing == "FORM")
								{
									itemEnclosing = itemEnclosing.fwEnclosing;
								}
	
								if (itemEnclosing.id)
								{
									myDIVID = itemEnclosing.id.toString();
									myDIVID = myDIVID.slice(1,-1);
									if (myDIVID=="PageDiv")
									{
										useTable = table;
									}
								}
							}
							
							if ( typeof(useTable)!="undefined" )
							{
							
								target = useTable.fwAddEnclosing("",true);
								
								target = target.fwAddRaw("");
								myLocation = target.fwAddRaw(myTextTop);
								myLocation = myLocation.fwAdd("");
								myLocation.fwMove(tags);
		//						div.fwAddRawln( myText );
								myLocation.fwAddRaw(myTextBottom);
							}
						}
					}
				}
			}
			
			if (divs=="" || !divs)
			{
				bodyTag.fwAddRawln( myText );
			}
			
		}
		else
		{
			bodyTag.fwAddRawln( myText );
		}
	}
}

</action-javascript> 
</item-action>
